* 자바 언어의 특징
1. 운영체제에 독립적
=> 에뮬레이터인 JVM을 통해 가능한 것, 자바 응용 프로그램은 운영체제 및 하드웨어가 아닌 JVM하고만 통신하고 JVM이 자바 응용프로그램으로부터 전달받은 명령을
해당 운영체제가 이해할 수 있도록 변환하여 전달한다. 즉, 자바 응용 프로그램은 운영체제에 독립적이나, JVM이 운영체제에 종속적이므로 썬에서는 여러 운영체제에
설치할 수 있는 다양한 버전의 JVM을 제공하고 있다.
2. 객체지향 언어이다.
=> 객체지향개념의 특징인 상속, 캡슐화, 다형성이 잘 적용된 순수한 객체지향언어이다.
3. 비교적 배우기 쉽다.
=> 자바의 연산자와 기본 구문은 C++에서, 객체지향관련 구문은 스몰톡(small talk)라는 객체지향언어에서 가져왔다. 이들의 장점만을 취하면서 복잡하고 불필요한
부분들은 과감히 제거하고 단순화 시켰는데, 이를 통해서 사용자들이 객체지향개념을 보다 쉽게 이해하고 활용할 수 있도록 하였습니다.
4. 자동 메모리 관리(Garbage Collection)
=> 자바 프로그램이 실행되면 가비지 컬렉터가 자동으로 메모리를 관리해주기 때문에 프로그래머는 메모리를 따로 관리하지 않아도 된다. 자동으로 메모리를 관리한다는 것이
다소 비효율적인 면도 있지만, 프로그래머가 보다 프로그래밍에 집중할 수 있도록 해준다.
5. 네트워크와 분산처리를 지원
=> 인터넷과 대규모 분산환경을 염두에 둔 까닭인지 풍부하고 다양한 네트워크 프로그래밍 라이브러리(Java API)를 통해 비교적 짧은 시간에 네트워크 관련 프로그램을
쉽게 개발 할 수 있다.
6. 멀티 쓰레드를 지원한다.
=> 일반적으로 멀티쓰레드의 지원은 사용되는 운영체제에 따라 구현방법도 상이하고 처리 방식도 다른데, 자바에서 개발되는 멀티 쓰레드 프로그램은 시스템과 관계없이
구현 가능하고 관련된 라이브러리(Java API)가 제공되므로 구현이 쉽다. 그리고 여러 쓰레드에 대한 스케쥴링을 자바 인터프리터가 담당하게 된다.
7. 동적 로딩(Dynamic Loading)을 지원한다.
=> 보통 자바로 작성된 애플리케이션은 여러 개의 클래스로 구성되어 있다. 자바는 동적 로딩을 지원하기 때문에 실행 시에 모든 클래스가 로딩되지 않고 필요한 시점에
클래스를 로딩하여 사용할 수 있다는 장점을 가지고 있다. 그 외에도 일부 클래스가 변경되어도 전체 애플리케이션을 다시 컴파일하지 않아도 되며, 애플리케이션의
변경사항이 발생해도 비교적 적은 작업만으로도 처리할 수 있는 유연한 애플리케이션을 작성할 수 있다.

* JVM(Java Virtual Machine)
JVM은 자바를 실행하기 위한 가상 기계이다. 고쳐말하면 자바를 실행하기 위한 가상 컴퓨터라는 뜻이다. 가상 컴퓨터는 실제 컴퓨터(하드웨어)가 아닌 소프트웨어로
구현된 컴퓨터라는 뜻으로 컴퓨터 속의 컴퓨터라고 생각하면 된다.
일반적인 애플리케이션의 코드는 OS만 거치고 하드웨어로 전달되는데 비해 Java 애플리케이션은 JVM을 한번 더 거치기 때문에, 그리고 하드웨어에 맞게 컴파일된
상태가 아니고 실행 시에 해석되기 때문에 속도가 느리다는 단점을 가지고 있다. 하지만 요즘엔 바이트코드(컴파일된 자바코드)를 하드웨어의 기계어로 바로 변환해주는
JIT 컴파일러와 향상된 최적화 기술이 적용되어서 속도의 격차를 많이 줄였다.

* 환경 변수를 설정하는 이유?
=> java를 설치하게 되면 jdk 폴더 밑, Home 밑, bin 파일에 자바 컴파일러와 자바 인터프리터가 존재하게 된다. 이 실행 파일들을 통해서 자바로 짜여진 소스코드를
컴파일하고 해석하게 되는데 환경 변수를 설정해주지 않으면 매번 컴파일러 및 인터프리터를 사용할 때마다 두 파일들이 위치한 경로를 앞에 함께 적어주어야만 한다.
이런 번거로운 과정을 생략하기위해서는 운영체제에 환경 변수라는 것을 추가해주면 된다. 운영체제는 환경 변수에 등록된 경로들을 모두 탐색하면서 해당하는 경로가 있는지
가장 먼저 확인하기 때문이다. 이렇게 환경 변수를 설정해주면 알아서 경로를 찾아가서 잘 실행되게 된다.

* java관련 exev 파일 및 컴파일 과정
javac.exe : 자바 컴파일러이다. 사람이 작성한 소스 코드를 기계어로 번역해준다. *.java를 *.class로 변환 시켜준다.
java.exe : 자바 인터프리터이다. 자바 프로그램(클래스 파일)을 실행해준다.
여기서 클래스라는 개념이 나오는데, 클래스는 자바 프로그램의 단위이며, 자바 프로그램은 최소 1개 이상의 클래스로 이루어져있다.
그리고 자바의 모든 문장들은 클래스 {} 안에 속해 있어야야 한다.
  
* main 메소드?
=> 자바 클래스를 실행하면 java.exe가 지정된 클래스 파일에서 메인 메소드를 찾아서 이 메소드의 첫번째 문장부터 모든 문장을 실행한다. 그러다가 모든 문장을 실행하고 나면
프로그램이 종료된다.
